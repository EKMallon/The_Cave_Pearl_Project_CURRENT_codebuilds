Readme file for 20171126_CavePearlDataLogger_DRIPsensorConfiguration:

This uses the Cave Pearl data logger as an event counter with an ISR responding to hardware interrrupts
on line D3 of a pro-mini style Arduino, which counts the number of alarm interrupts generated by 
an accelerometer in tap sensing mode. We use these as drip counters to study vadose zone hydrology 
in Karst cave systems:
https://edwardmallon.wordpress.com/category/developing-a-drip-%E2%9A%B6-sensor/

but since interrupt event counting is a fairly generic application, we also use the same code to 
record reed switch closures on traditional tipping bucket Rain gauges:
https://edwardmallon.wordpress.com/2015/06/15/developing-an-arduino-based-weather-station/ 

This self-documenting code is extensively commented with verbose variable names to describe functions.

The key insight into the operation of this Event-counting variant is that there is a while-loop 
at the very end of the main loop which "traps" the processor until the RTC alarm fires:

void loop ()
{
// STANDARD interval events common to ALL code variants:
//...read rtc, make current timestamp...
//...check if new log file needs to be generated...
//...capture new sensor readings....
//...concatenate sensor data to EEPROMBuffer char array with Pstring...
//...buffer that array to eeprom....
//...if eeprom memory is full - flush eeprom data to the SD card...
//...if midnight rollover occurs, trigger oncePerDayEvents() to save daily totals to StatusLog.csv 
//...set next alarm time based on SampleIntervalMinutes variable...

#if defined(AdxlDripSensor) || defined(TipBucket_RainGauge)  //the EVENT counter "sub-loop"
while (rtc_INT0_Flag == false) { 
//...stuff in here for handling the D3 alarms with debouncing delays, register resets, etc....

sleepNwait4D3Interrupt();    // ISRs from this function set EITHER INT1_Flag = true;  OR  rtc_INT0_Flag = true;
}                            // end of while (rtc_INT0_Flag == false)
#else 
sleepNwait4RTC();      //this is the standard RTC-ALARM-ONLY processor sleeping routine
// which is used when no other interrupt generating device (Adxl345/TipBucket/etc) is connected to D3

#endif  // for #if defined(AdxlDripSensor) || defined(TipBucket_RainGauge)

// you only break out of the event counting while-loop when rtc_INT0_Flag = true 
so the RTC alarm has fired, rather than the acceleometer signal interrupt. 

}  //end of void loop ()  //from here the code proceeds back to start of main loop


